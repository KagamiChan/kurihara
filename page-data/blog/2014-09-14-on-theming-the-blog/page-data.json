{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/blog/2014-09-14-on-theming-the-blog/","result":{"data":{"site":{"siteMetadata":{"title":"少年读书隙中窥月"}},"markdownRemark":{"id":"567e969c-85aa-5f24-adfa-1ba8d431b0ab","excerpt":"正式确认了旧日志已经阵亡，有事烧香之后，重建也在计划当中了。此时 Linode 的注册就送 1…","html":"<p>正式确认了旧日志已经阵亡，有事烧香之后，重建也在计划当中了。此时 Linode 的注册就送 10 刀的优惠简直让人心动 = =</p>\n<p>前几天说要给自己的日志做一个新主题，不过现在还是没有动手。当然，治疗拖延症的首要手段就是「马上去做」，但是作为高级患者，还是忍不住为自己找一个理由：wordpress 的主题开发是投入大产出小的事情。</p>\n<p>上次基于 <code class=\"language-text\">twentyfourteen</code> 改主题的时候，主要是将原本最高只有 1152px 宽的页面，在我的 1080p 屏幕上看，右边会空出一大截，实在不舒服，所以改造成为全画面的。当时的我还不知道有子主题这样的手段，也对 <code class=\"language-text\">SASS</code> / <code class=\"language-text\">LESS</code> 之类的了解不多，所以都是直接查找替换颜色，各个 <code class=\"language-text\">@media</code> 里边的绝对宽度换成相对宽度，每次变动都得进行各分辨率调试，而且当时的 Chrome 和 Firefox 还没有开发者工具还没有响应式工具，改得很痛苦，最后还是留下了一些问题。</p>\n<p>从这个主题的 css 注释来看，开发者应该用了 css 编程编译工具——我才不信他们和我一样批量替换修改呢，但是却恶意地没有提供源代码，虽然 github 上有基于 <a href=\"https://github.com/arounditNet/TwentyFourteen-Child-SCSS\">SCSS 的</a> 和 <a href=\"https://github.com/pelicanpaul/twentyfourteen-childless\">LESS 的</a> 子主题，不过响应式调整方面的坑估计还是还是很大，作罢。</p>\n<p>基于前端框架开发的主题也是有的，比如用 <code class=\"language-text\">bootstrap</code> 的主题就有很漂亮的 <a href=\"http://demo.yoarts.com/flatblog/\">Flat</a> 和 <a href=\"http://www.marchettidesign.net/fullby/demo/\">Fullby</a>，用 <code class=\"language-text\">Semantic-UI</code> 的有 <a href=\"https://github.com/KagamiChan/Semantic-UI-WordPress\">Semantic UI for wordpress</a> 所有的 WP 主题也都是 GPL 的，可以随便改，但是又感觉改动量会不小，作罢。</p>\n<p>寻找到这里的时候，我突然意识到，我为什么需要开发一款符合<a href=\"http://codex.wordpress.org/Theme_Unit_Test\">所有单元测试</a>的主题呢？那些左边栏右边栏顶栏底栏，那些各种类型的主题，对于我来说也并不是都有用的，自用的话，完全可以精简嘛。基于这个思路，我又开始刷官方的主题制作文档。不过略浏览了一下才发现，需要掌握的 wordpress 知识有点多。那些各种各样的内置方法，各种各样的钩子，一方面可以说是完善，另一方面可以说是臃肿。我又没有打算以开发主题为生——虽然一个好的主题能以几十块钱来按份卖，wordpress 开发也有一个小行业，但是实在提不起兴趣去学。</p>\n<p>当然，我也有考虑过切换到非 wp 的日志系统，基本来说就是基于 markdown 的系统，比如 Typecho，Octopress，Hexo，Ghost 以及现在临时在用的 Github Pages，但是实际写作才发现，有富文本编辑器以及媒体管理，有时候还是挺方便的（<a href=\"/tokyo-victory/\">上一篇日志</a>的引用块和图片着实让我为难了一下），而且现有数据的迁移也需要花时间，因此也作罢。</p>\n<p>所以，最后定的方案是，统统推倒，自己发明个轮子。用 <a href=\"http://wordpress.org/plugins/json-api/\">JSON API</a> 生成 wp 的 Restful API，用 Lavarel 作为后台，前端能避开 jQuery 就避开，顺便也练练手。整个方案里比较薄弱的环节有可能是 Restful API 的可玩性和安全性了，而且从效率的角度来看，这个方案不一定能有 wordpress 原生主题来得高，不过这么玩了之后，获得的经验值应该更有营养一点。以后有机会的话还可以再拿 python 或者 rails 开发一遍，获得附加经验值呢……</p>","frontmatter":{"title":"关于日志的主题","publish_date":"2014-09-14T04:05:00.000+08:00","revise_date":"2014-09-14T04:05:00.000+08:00","draft":false}}},"pageContext":{"previous":{"id":"1ebe28ec-6bd8-5c81-a9d2-359728631f8c","fields":{"slug":"/blog/2014-09-10-sas-tokyo-victory/","type":"blog","timeToRead":{"words":1026,"minutes":6}},"frontmatter":{"title":"サザンオールスターズ - 東京 VICTORY","publish_date":"2014-09-10T19:30:00.000+08:00"}},"slug":"/blog/2014-09-14-on-theming-the-blog/"}},"staticQueryHashes":["1330398833","2356112386"],"slicesMap":{}}